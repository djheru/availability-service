{
  "name": "Availability Service",
  "tagline": "A simple service to check availability of date range given a list of reserved date ranges",
  "body": "[![CircleCI](https://circleci.com/gh/djheru/availability-service.svg?style=shield)](https://circleci.com/gh/djheru/availability-service)\r\n\r\n# Availability Service\r\nThis module consists of a class that has one main method, `checkAvailability()`. This method accepts a start date and an end date as strings formatted like `'YYYY-MM-DD'`, along with an array of reservation objects, formatted like: \r\n```\r\n{\"campsiteId\": 1, \"startDate\": \"2016-06-01\", \"endDate\": \"2016-06-04\"}\r\n```\r\nThe method will check to see which sites, identified by `'campsiteId'`, have openings for the requested dates, taking the gap rules into consideration.\r\n\r\n## Gap Rules\r\nTo eliminate or minimize un-booked sites, site owners utilize \"Gap Rules\" which enforce a maximum number of days unbooked between reservations. To illustrate, consider a site that has existing reservations spanning the 1st through the 3rd of the month and the 10th through the 15th. If a gap rule exists that states the maximum gap is 2 days, a request for a reservation spanning the 4th through the 7th would be denied, because the gap between the 7th and the 10th violates the rule.\r\n\r\n## High-Level Approach\r\nMy approach for this challenge centered around implementing the solution in a manner that allowed easy reuse and high cohesion. I chose to create a module that would implement the functionality in either a server environment or in the browser. To accomplish this, I wrote the module as an ES2015 module, and then transpiled it using Babel and the `babel-plugin-add-module-exports` plugin to allow it to be used with `require()` or `import`. \r\n\r\nTo support a more effective workflow, I set up a CI workflow using [CircleCI](https://circleci.com/gh/djheru/availability-service) which automatically builds the module and runs the tests each time a commit is pushed to master. The badge at the top of this page illustrates the current build status. This process could be improved by enforcing a rule that the CI build must pass successfully before commits are allowed to be merged into the master branch.\r\n\r\nTo make it easier for other applications to use this module as a dependency, I've published it on [npm](https://www.npmjs.com/package/availability-service). This makes it easy for other applications to easily include it using `npm install availability-service` and to require that specific versions be used. Details of the example API are provided below.\r\n\r\n**The processing of the reservation list to determine availability follows four main steps:**\r\n1. Remove any reservation objects that contain a reservation which overlaps the requested date range\r\n2. Remove all reservation objects that relate to a site that has an overlapping reservation (in a different reservation object)\r\n3. Parse the remaining reservations into a format like: \r\n```\r\n{ campsiteId: 1, reservations: [ [startDate1, endDate1], [startDate2, endDate2], [startDate3, endDate3] ] }\r\n```\r\n4. Calculate the gap between each reservation in the reservations array above, and calculate if the requested range will fit without violating the gap rules.\r\n\r\n### Assumptions\r\nWhen determining how to solve this problem, I made the following assumptions:\r\n1. The gap rule value was to be used in an inclusive comparison. In other words, if the gap rule is 2, that means that the difference between the end of one reservation and the beginning of another must be _less than or equal to 2_, rather than _less than 2_.\r\n2. If there's more than one gap rule, the smallest rule takes precedence.\r\n3. The gap rules before and after the requested range must be calculated.\r\n4. If there's no reservation before a requested range or there's not one after it, there's no need to calculate the gap rule for that span.\r\n\r\n### Dependencies\r\nTo speed development time, I used the popular [moment.js](http://momentjs.com/) library to extend the `Date` object, and the [moment-range](https://github.com/gf3/moment-range) library to provide additional methods for calculating date ranges.\r\n\r\n## Building and Running Tests\r\n* `npm run build` - produces production version of your library under the `lib` folder\r\n* `npm run test` - You'll never believe what it does!\r\n* `npm run test:watch` - re-run tests as you make changes\r\n\r\n## Example Implementation\r\nTo provide an example implementation, I created a Loopback API that \r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}